package map;

import common.ProxySet;
import common.custom.EventListener;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import javax.swing.Timer;

/**
 *
 * @author kamyshev.a
 */
public class MapPanel extends javax.swing.JPanel {

    private static final int EXP_BUF_SIZE = 256;
    private static final int SHIFT_THRESHOLD = EXP_BUF_SIZE / 2;
    private static final int LOWER_THRESHOLD = SHIFT_THRESHOLD;
    private static final int UPPER_THRESHOLD = EXP_BUF_SIZE * 2 + SHIFT_THRESHOLD;
    private final Timer timer;

    private final YandexMap map;
    private final Rectangle rectangle;
    private final Rectangle map_rectangle;

    private final Point center;
    private final Point map_center;
    private final Point mouse_point;
    private final Point map_shift;

    /**
     * Creates new MapPanel
     *
     * @param pos Start position in degrees
     * @param scale
     * @param proxy Specify proxy settings if necessary
     * @throws java.lang.Exception
     */
    public MapPanel(GeoPos pos, int scale, ProxySet proxy) throws Exception {
        initComponents();
        map = new YandexMap(pos, scale);
        map.OnData.add(OnMapTile);
        if (proxy != null) {
            map.proxy_server = proxy.getSocketAddress();
            map.proxy_authorization = proxy.getBasicAuthorization();
        }
        map.Open();
        rectangle = new Rectangle();
        map_rectangle = new Rectangle(0, 0, EXP_BUF_SIZE, EXP_BUF_SIZE);
        center = new Point();
        map_center = new Point();
        mouse_point = new Point();
        map_shift = new Point();
        TimerHandler timer_handler = new TimerHandler();
        timer = new Timer(500, timer_handler);
        timer.setRepeats(false);
    }

    public void setOnLog(EventListener e) {
        map.OnLog.add(e);
    }

    public int getScale() {
        if (map != null) {
            return map.getScale();
        } else {
            return 0;
        }
    }

    public void getPosition(GeoPos pos) {
        if (map != null) {
            Point point = map.getPoint();
            pos.lon = map.XToLon(point.x);
            pos.lat = map.YToLat(point.y);
        }
    }

    private void ResizeMap() {
        map_rectangle.width = rectangle.width + EXP_BUF_SIZE * 2;
        map_rectangle.height = rectangle.height + EXP_BUF_SIZE * 2;
        map_center.x = map_rectangle.width / 2;
        map_center.y = map_rectangle.height / 2;
        map.setRectangle(map_rectangle);
    }

    private class TimerHandler implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ts) {
            ResizeMap();
        }
    }

    private final EventListener OnMapTile = (Object object) -> {
        repaint();
    };

    private boolean ShiftInMap(int sx, int sy) {
        Point point = map.getPoint();
        int width = map.getWidth();
        int height = map.getHeight();
        int x = point.x - sx;
        if (x < 0 || x > width) {
            return false;
        }
        int y = point.y - sy;
        return !(y < 0 || y > height);
    }

    private void GetMap(Point shift) {
        if (!ShiftInMap(map_shift.x + shift.x, map_shift.y + shift.y)) {
            return;
        }
        if ((Math.abs(map_shift.x) > SHIFT_THRESHOLD
                || Math.abs(map_shift.y) > SHIFT_THRESHOLD)) {
            shift = new Point(map_shift.x + shift.x, map_shift.y + shift.y);
            map_shift.move(0, 0);
            map.GetMap(shift);
        } else {
            map_shift.move(map_shift.x + shift.x, map_shift.y + shift.y);
            this.repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmDevice = new javax.swing.JPopupMenu();
        miDoSomething = new javax.swing.JMenuItem();

        miDoSomething.setText("do something");
        miDoSomething.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDoSomethingActionPerformed(evt);
            }
        });
        pmDevice.add(miDoSomething);

        setDoubleBuffered(false);
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                formAncestorRemoved(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        getBounds(rectangle);
        center.x = rectangle.width / 2;
        center.y = rectangle.height / 2;
        int x = map_rectangle.width - rectangle.width;
        int y = map_rectangle.height - rectangle.height;
        if (x < LOWER_THRESHOLD || x > UPPER_THRESHOLD) {
            ResizeMap();
        }
        timer.restart();
    }//GEN-LAST:event_formComponentResized

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved

        int rotation = evt.getWheelRotation();
        int scale = map.getScale();
        scale = rotation > 0 ? scale - 1 : scale + 1;
        if (scale >= 0 && scale <= 17) {
            if (rotation < 0) {
                Point point = evt.getPoint();
                if (!ShiftInMap(center.x - point.x, center.y - point.y)) {
                    return;
                }
                point.move((center.x - point.x) / 2, (center.y - point.y) / 2);
                map.GetMap(point, scale);
            } else {
                map.GetMap(new Point(0, 0), scale);
            }
            map_shift.move(0, 0);

        }
    }//GEN-LAST:event_formMouseWheelMoved

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (evt.getButton() == MouseEvent.BUTTON1) {
            mouse_point.setLocation(evt.getPoint());
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (evt.getModifiersEx() == MouseEvent.BUTTON1_DOWN_MASK) {
            Point point = evt.getPoint();
            Point shift = new Point(point.x - mouse_point.x, point.y - mouse_point.y);
            GetMap(shift);
            mouse_point.setLocation(point);
        }
    }//GEN-LAST:event_formMouseDragged

    private void formAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_formAncestorRemoved

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            pmDevice.show(this, evt.getX(), evt.getY());
            return;
        }
        Point point = map.getPoint();
        point.x += evt.getX() - map_center.x + map_shift.x;
        point.y += evt.getY() - map_center.y + map_shift.y;
        GeoPos pos = new GeoPos(map.XToLon(point.x), map.YToLat(point.y));
        point = new Point(map.LonToX(pos.lon), map.LatToY(pos.lat));
        pos.lat = 0;

    }//GEN-LAST:event_formMouseClicked

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

    }//GEN-LAST:event_formMouseReleased

    private void miDoSomethingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDoSomethingActionPerformed
        // do something
    }//GEN-LAST:event_miDoSomethingActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem miDoSomething;
    private javax.swing.JPopupMenu pmDevice;
    // End of variables declaration//GEN-END:variables

    @Override
    public void paintComponent(Graphics gr) {
        Graphics2D g = (Graphics2D) gr;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        g.setColor(Color.WHITE);
        g.fillRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
        int x = map_center.x - center.x - map_shift.x;
        int y = map_center.y - center.y - map_shift.y;
        g.drawImage(map.image,
                0, 0, rectangle.width, rectangle.height,
                x, y, x + rectangle.width, y + rectangle.height,
                null);
    }
}
