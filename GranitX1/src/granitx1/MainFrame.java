package granitX1;

import EAV.*;
import EAV.Attribute;
import common.*;
import common.custom.*;
import granitX1.client.*;
import java.awt.BorderLayout;
import java.awt.Component;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.TreeSet;
import javax.crypto.NoSuchPaddingException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import map.GeoPos;
import map.MapPanel;
import org.eclipse.paho.client.mqttv3.MqttException;

/**
 *
 * @author kamyshev.a
 */
public class MainFrame extends javax.swing.JFrame {

    private static final String INI_FILE_NAME = "GranitX1.ini";
    private final SimpleDateFormat df;
    private final TreeSet<DualKey> selectedEntities;
    private final ArrayList<DualKey> listEntities;
    EAV.EntitiesMap entities;
    EAV.AttributesMap attributes;
    private MapPanel map;
    private ProxySet proxy;
    private final GeoPos map_position;
    private int map_scale = 10;
    private Client client;
    private final CheckBoxList subscList;
    JCheckBox[] checkBoxArray = new JCheckBox[0];

    public MainFrame() {
        super("Granit X1");
        //Locale.setDefault( new Locale("ru", "RU"));
        initComponents();
        super.setLocationRelativeTo(null); // screen center
        //super.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    
        DefaultCaret caret = (DefaultCaret) logText.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        df = new SimpleDateFormat("MM.dd HH:mm:ss");

        selectedEntities = new TreeSet<>();
        listEntities = new ArrayList<>();
        subscList = new CheckBoxList();
        subscScroll.setViewportView(subscList);
        subscList.setComponentPopupMenu(subscPopupMenu);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle");
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement(bundle.getString("MainFrame.tablePanel.Item0"));
        model.addElement(bundle.getString("MainFrame.tablePanel.Item1"));
        entityTypes.setModel(model);

        map_position = new GeoPos(37.3345F, 55.50883F);
        client = new Client();
        client.OnLog.add(OnClientLog);
        client.OnData.add(DataListener);
        client.OnConnect.add(ConnectListener);
        LoadConfig();
        client.Open();
        try {
            map = new MapPanel(map_position, map_scale, proxy);
            map.setOnLog(OnMapLog);
            mapPanel.setLayout(new BorderLayout());
            mapPanel.add(map, BorderLayout.CENTER);
        } catch (Exception ex) {
            Log(" [Main] MapPanel create fail, '" + ex + "'\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablePopupMenu = new javax.swing.JPopupMenu();
        receiveMenuItem = new javax.swing.JMenuItem();
        addMenuItem = new javax.swing.JMenuItem();
        editMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        subscPopupMenu = new javax.swing.JPopupMenu();
        addSubscMenuItem = new javax.swing.JMenuItem();
        editSubscMenuItem = new javax.swing.JMenuItem();
        deleteSubscMenuItem = new javax.swing.JMenuItem();
        profileDialog = new javax.swing.JDialog();
        profileApply = new javax.swing.JButton();
        profileCancel = new javax.swing.JButton();
        profileClientID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        profilePassword = new javax.swing.JTextField();
        attributeDialog = new javax.swing.JDialog();
        attributeCancel = new javax.swing.JButton();
        attributeApply = new javax.swing.JButton();
        attributeDescription = new javax.swing.JTextArea();
        attributeNumber = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        attributeType = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        valueText = new javax.swing.JTextField();
        subscDialog = new javax.swing.JDialog();
        subscCancel = new javax.swing.JButton();
        subscApply = new javax.swing.JButton();
        subscTopic = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tabPane = new javax.swing.JTabbedPane();
        mapPanel = new javax.swing.JPanel();
        dataPanel = new javax.swing.JSplitPane();
        entitiesPanel = new javax.swing.JPanel();
        entityTypes = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        entitiesList = new javax.swing.JList<>();
        attributesPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        attributesTable = new javax.swing.JTable();
        subscPanel = new javax.swing.JPanel();
        subscScroll = new javax.swing.JScrollPane();
        logPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logText = new javax.swing.JTextArea();
        statusPanel = new javax.swing.JPanel();
        statusText1 = new javax.swing.JTextField();
        statusText2 = new javax.swing.JTextField();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        receiveMenuItem.setText(bundle.getString("MainFrame.receiveMenuItem.text")); // NOI18N
        receiveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiveMenuItemActionPerformed(evt);
            }
        });
        tablePopupMenu.add(receiveMenuItem);

        addMenuItem.setText(bundle.getString("MainFrame.addMenuItem.text")); // NOI18N
        addMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuItemActionPerformed(evt);
            }
        });
        tablePopupMenu.add(addMenuItem);

        editMenuItem.setText(bundle.getString("MainFrame.editMenuItem.text")); // NOI18N
        tablePopupMenu.add(editMenuItem);

        deleteMenuItem.setText(bundle.getString("MainFrame.deleteMenuItem.text")); // NOI18N
        tablePopupMenu.add(deleteMenuItem);

        addSubscMenuItem.setText(bundle.getString("MainFrame.addSubscMenuItem.text")); // NOI18N
        addSubscMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubscMenuItemActionPerformed(evt);
            }
        });
        subscPopupMenu.add(addSubscMenuItem);

        editSubscMenuItem.setText(bundle.getString("MainFrame.editSubscMenuItem.text")); // NOI18N
        editSubscMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSubscMenuItemActionPerformed(evt);
            }
        });
        subscPopupMenu.add(editSubscMenuItem);

        deleteSubscMenuItem.setText(bundle.getString("MainFrame.deleteSubscMenuItem.text")); // NOI18N
        subscPopupMenu.add(deleteSubscMenuItem);

        profileDialog.setTitle(bundle.getString("MainFrame.profileDialog.title")); // NOI18N
        profileDialog.setModal(true);
        profileDialog.setSize(new java.awt.Dimension(400, 260));

        profileApply.setText(bundle.getString("MainFrame.profileApply.text")); // NOI18N
        profileApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileApplyActionPerformed(evt);
            }
        });

        profileCancel.setText(bundle.getString("MainFrame.profileCancel.text")); // NOI18N
        profileCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileCancelActionPerformed(evt);
            }
        });

        profileClientID.setText("usr/root");
        profileClientID.setToolTipText("");

        jLabel4.setText(bundle.getString("MainFrame.jLabel4.text")); // NOI18N

        jLabel7.setText(bundle.getString("MainFrame.jLabel7.text")); // NOI18N

        profilePassword.setToolTipText("");

        javax.swing.GroupLayout profileDialogLayout = new javax.swing.GroupLayout(profileDialog.getContentPane());
        profileDialog.getContentPane().setLayout(profileDialogLayout);
        profileDialogLayout.setHorizontalGroup(
            profileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(profileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(profileClientID)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, profileDialogLayout.createSequentialGroup()
                        .addGap(0, 235, Short.MAX_VALUE)
                        .addComponent(profileCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(profileApply))
                    .addComponent(profilePassword)
                    .addGroup(profileDialogLayout.createSequentialGroup()
                        .addGroup(profileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        profileDialogLayout.setVerticalGroup(
            profileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profileClientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profilePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(profileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(profileApply)
                    .addComponent(profileCancel))
                .addContainerGap())
        );

        attributeDialog.setTitle(bundle.getString("MainFrame.attributeDialog.title")); // NOI18N
        attributeDialog.setSize(new java.awt.Dimension(400, 300));

        attributeCancel.setText(bundle.getString("MainFrame.attributeCancel.text")); // NOI18N
        attributeCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributeCancelActionPerformed(evt);
            }
        });

        attributeApply.setText(bundle.getString("MainFrame.attributeApply.text")); // NOI18N

        attributeDescription.setEditable(false);
        attributeDescription.setBackground(new java.awt.Color(240, 240, 240));
        attributeDescription.setColumns(20);
        attributeDescription.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        attributeDescription.setRows(3);
        attributeDescription.setText(bundle.getString("MainFrame.attributeDescription.text")); // NOI18N
        attributeDescription.setAutoscrolls(false);
        attributeDescription.setBorder(null);

        attributeNumber.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel3.setText(bundle.getString("MainFrame.jLabel3.text")); // NOI18N

        jLabel5.setText(bundle.getString("MainFrame.jLabel5.text")); // NOI18N

        attributeType.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel6.setText(bundle.getString("MainFrame.jLabel6.text")); // NOI18N

        valueText.setToolTipText("");

        javax.swing.GroupLayout attributeDialogLayout = new javax.swing.GroupLayout(attributeDialog.getContentPane());
        attributeDialog.getContentPane().setLayout(attributeDialogLayout);
        attributeDialogLayout.setHorizontalGroup(
            attributeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributeDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(attributeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attributeDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(attributeCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(attributeApply))
                    .addComponent(attributeDescription)
                    .addGroup(attributeDialogLayout.createSequentialGroup()
                        .addGroup(attributeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(attributeDialogLayout.createSequentialGroup()
                                .addGroup(attributeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(attributeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(attributeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(attributeType, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel6))
                        .addGap(0, 188, Short.MAX_VALUE))
                    .addComponent(valueText))
                .addContainerGap())
        );
        attributeDialogLayout.setVerticalGroup(
            attributeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributeDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(attributeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(attributeDialogLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attributeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(attributeDialogLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attributeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(attributeDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(attributeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attributeApply)
                    .addComponent(attributeCancel))
                .addContainerGap())
        );

        subscDialog.setTitle(bundle.getString("MainFrame.subscDialog.title")); // NOI18N
        subscDialog.setModal(true);
        subscDialog.setSize(new java.awt.Dimension(400, 150));

        subscCancel.setText(bundle.getString("MainFrame.subscCancel.text")); // NOI18N
        subscCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscCancelActionPerformed(evt);
            }
        });

        subscApply.setText(bundle.getString("MainFrame.subscApply.text")); // NOI18N
        subscApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscApplyActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("MainFrame.jLabel1.text")); // NOI18N
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout subscDialogLayout = new javax.swing.GroupLayout(subscDialog.getContentPane());
        subscDialog.getContentPane().setLayout(subscDialogLayout);
        subscDialogLayout.setHorizontalGroup(
            subscDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subscDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subscDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subscTopic, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subscDialogLayout.createSequentialGroup()
                        .addGap(0, 223, Short.MAX_VALUE)
                        .addComponent(subscCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(subscApply))
                    .addGroup(subscDialogLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        subscDialogLayout.setVerticalGroup(
            subscDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subscDialogLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subscTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(subscDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subscApply)
                    .addComponent(subscCancel))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPaneStateChanged(evt);
            }
        });

        mapPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 759, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );

        tabPane.addTab(bundle.getString("MainFrame.mapPanel.TabConstraints.tabTitle"), mapPanel); // NOI18N

        dataPanel.setDividerLocation(200);

        entitiesPanel.setPreferredSize(new java.awt.Dimension(250, 150));
        entitiesPanel.setLayout(new java.awt.BorderLayout());

        entityTypes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Devices", "Profiles" }));
        entityTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entityTypesActionPerformed(evt);
            }
        });
        entitiesPanel.add(entityTypes, java.awt.BorderLayout.NORTH);

        entitiesList.setToolTipText("");
        entitiesList.setComponentPopupMenu(tablePopupMenu);
        entitiesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                entitiesListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(entitiesList);

        entitiesPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        dataPanel.setLeftComponent(entitiesPanel);

        attributesPanel.setLayout(new java.awt.BorderLayout());

        attributesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Number", "Type", "Value", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        attributesTable.setComponentPopupMenu(tablePopupMenu);
        attributesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(attributesTable);
        if (attributesTable.getColumnModel().getColumnCount() > 0) {
            attributesTable.getColumnModel().getColumn(0).setMaxWidth(100);
            attributesTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("MainFrame.attributesTable.columnModel.title0")); // NOI18N
            attributesTable.getColumnModel().getColumn(1).setMaxWidth(100);
            attributesTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("MainFrame.attributesTable.columnModel.title1")); // NOI18N
            attributesTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("MainFrame.attributesTable.columnModel.title2")); // NOI18N
            attributesTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("MainFrame.attributesTable.columnModel.title3")); // NOI18N
        }

        attributesPanel.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        dataPanel.setRightComponent(attributesPanel);

        tabPane.addTab(bundle.getString("MainFrame.dataPanel.TabConstraints.tabTitle"), dataPanel); // NOI18N

        subscPanel.setLayout(new java.awt.BorderLayout());
        subscPanel.add(subscScroll, java.awt.BorderLayout.CENTER);

        tabPane.addTab(bundle.getString("MainFrame.subscPanel.TabConstraints.tabTitle"), subscPanel); // NOI18N

        logPanel.setLayout(new java.awt.BorderLayout());

        logText.setColumns(20);
        logText.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        logText.setRows(5);
        jScrollPane1.setViewportView(logText);

        logPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabPane.addTab(bundle.getString("MainFrame.logPanel.TabConstraints.tabTitle"), logPanel); // NOI18N

        getContentPane().add(tabPane, java.awt.BorderLayout.CENTER);

        statusPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusPanel.setLayout(new java.awt.BorderLayout());

        statusText1.setEditable(false);
        statusText1.setBackground(new java.awt.Color(255, 255, 255));
        statusText1.setText(bundle.getString("MainFrame.statusText1.text")); // NOI18N
        statusText1.setPreferredSize(new java.awt.Dimension(200, 20));
        statusPanel.add(statusText1, java.awt.BorderLayout.EAST);

        statusText2.setEditable(false);
        statusText2.setBackground(new java.awt.Color(255, 255, 255));
        statusPanel.add(statusText2, java.awt.BorderLayout.CENTER);

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        SaveConfig();
    }//GEN-LAST:event_formWindowClosing

    private void entityTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entityTypesActionPerformed
        RefreshTable();
    }//GEN-LAST:event_entityTypesActionPerformed

    private void addMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuItemActionPerformed
        Component invoker = tablePopupMenu.getInvoker();
        if (invoker == entitiesList) {
            switch (entityTypes.getSelectedIndex()) {
                case 0:
                    profileClientID.setText("dev/");
                    break;
                case 1:
                    profileClientID.setText("usr/");
                    break;
            }
            profilePassword.setText("");
            profileDialog.setLocationRelativeTo(this);
            profileDialog.setVisible(true);
        } else {
            //if (entity != null) {
            attributeDialog.setLocationRelativeTo(this);
            attributeDialog.setVisible(true);
        }
    }//GEN-LAST:event_addMenuItemActionPerformed

    private void profileCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileCancelActionPerformed
        profileDialog.setVisible(false);
    }//GEN-LAST:event_profileCancelActionPerformed

    private void profileApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileApplyActionPerformed
        profileDialog.setVisible(false);
        EAV.Entity entity = null;
        switch (entityTypes.getSelectedIndex()) {
            case 0:
                entity = new Entity(0, 3);
                break;
            case 1:
                entity = new Entity(0, 2);
                break;
        }
        if (entity == null) {
            return;
        }
        try {
            EAV.AttributeValue value = new AttributeValue(profileClientID.getText());
            entity.attributes.add(new Attribute(0, 1000, value));
            profilePassword.setText(MD5.Hash(profilePassword.getText()));
            value = new AttributeValue(profilePassword.getText());
            entity.attributes.add(new Attribute(0, 1001, value));
            LinkedList<Entity> list = new LinkedList<>();
            list.add(entity);
            client.CreateEntities(list, "New user");
        } catch (Exception ex) {
            Log(" [Main] Create task 'New user' fail, '" + ex + "'\n");
        }
    }//GEN-LAST:event_profileApplyActionPerformed

    private void receiveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiveMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_receiveMenuItemActionPerformed

    private void entitiesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_entitiesListValueChanged
        if (!evt.getValueIsAdjusting()) {
            selectedEntities.clear();
            int indices[] = entitiesList.getSelectedIndices();
            for (int i = 0; i < indices.length; i++) {
                selectedEntities.add(listEntities.get(indices[i]));
            }
            RefreshAttributes();
        }

    }//GEN-LAST:event_entitiesListValueChanged

    private void tabPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPaneStateChanged
        Refresh();
    }//GEN-LAST:event_tabPaneStateChanged

    private void addSubscMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubscMenuItemActionPerformed
        subscTopic.setText("");
        subscDialog.setLocationRelativeTo(this);
        subscDialog.setVisible(true);        
    }//GEN-LAST:event_addSubscMenuItemActionPerformed

    private void subscCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscCancelActionPerformed
        subscDialog.setVisible(false);
    }//GEN-LAST:event_subscCancelActionPerformed

    private void attributeCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributeCancelActionPerformed
        attributeDialog.setVisible(false);
    }//GEN-LAST:event_attributeCancelActionPerformed

    private void subscApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscApplyActionPerformed
        JCheckBox[] array = checkBoxArray;
        checkBoxArray = new JCheckBox[array.length + 1];
        System.arraycopy(array, 0, checkBoxArray, 0, array.length);
        checkBoxArray[array.length] = new JCheckBox(subscTopic.getText());
        subscList.setListData(checkBoxArray);
    }//GEN-LAST:event_subscApplyActionPerformed

    private void editSubscMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSubscMenuItemActionPerformed
        
        subscDialog.setLocationRelativeTo(this);
        subscDialog.setVisible(true);
    }//GEN-LAST:event_editSubscMenuItemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addMenuItem;
    private javax.swing.JMenuItem addSubscMenuItem;
    private javax.swing.JButton attributeApply;
    private javax.swing.JButton attributeCancel;
    private javax.swing.JTextArea attributeDescription;
    private javax.swing.JDialog attributeDialog;
    private javax.swing.JSpinner attributeNumber;
    private javax.swing.JSpinner attributeType;
    private javax.swing.JPanel attributesPanel;
    private javax.swing.JTable attributesTable;
    private javax.swing.JSplitPane dataPanel;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenuItem deleteSubscMenuItem;
    private javax.swing.JMenuItem editMenuItem;
    private javax.swing.JMenuItem editSubscMenuItem;
    private javax.swing.JList<String> entitiesList;
    private javax.swing.JPanel entitiesPanel;
    private javax.swing.JComboBox<String> entityTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel logPanel;
    private javax.swing.JTextArea logText;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JButton profileApply;
    private javax.swing.JButton profileCancel;
    private javax.swing.JTextField profileClientID;
    private javax.swing.JDialog profileDialog;
    private javax.swing.JTextField profilePassword;
    private javax.swing.JMenuItem receiveMenuItem;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField statusText1;
    private javax.swing.JTextField statusText2;
    private javax.swing.JButton subscApply;
    private javax.swing.JButton subscCancel;
    private javax.swing.JDialog subscDialog;
    private javax.swing.JPanel subscPanel;
    private javax.swing.JPopupMenu subscPopupMenu;
    private javax.swing.JScrollPane subscScroll;
    private javax.swing.JTextField subscTopic;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JPopupMenu tablePopupMenu;
    private javax.swing.JTextField valueText;
    // End of variables declaration//GEN-END:variables

    private String TimeString() {
        Date dt = new Date();
        return df.format(dt);
    }

    private EventListener OnMapLog = (Object object) -> {
        Log(" [Map] '" + object + "'\n");
    };

    private EventListener OnClientLog = (Object object) -> {
        Log(" [Client] '" + object + "'\n");
        if (client.Connected()) {
            statusText1.setText(" client ID: " + client.client_id + ", connected");
        } else {
            statusText1.setText(" client ID: " + client.client_id + ", no connect");
        }
    };

    private EventListener DataListener = this::OnClientData;
    private EventListener ConnectListener = this::OnClientConnect;

    private void Log(String s) {
        if (logText.getLineCount() > 500) {
            try {
                logText.replaceRange("", 0, logText.getLineEndOffset(400));
            } catch (BadLocationException ex) {
            }
        }
        logText.append(TimeString() + s);
        statusText2.setText(s);
    }

    private void LoadConfig() {
        String fn = new File("").getAbsolutePath() + File.separator + INI_FILE_NAME;
        Properties p = new Properties();
        try {
            p.load(new FileInputStream(new File(fn)));
        } catch (IOException ex) {
            Log(" [Main] GranitX1.ini load fail, '" + ex + "'\n");
        }
        Crypto crypto;
        try {
            crypto = new Crypto();
        } catch (NoSuchAlgorithmException | NoSuchPaddingException ex) {
            Log(" [Main] Create Crypto fail, '" + ex + "'\n");
            return;
        }
        client.address = p.getProperty("ADDRESS", "localhost");
        client.port = Integer.valueOf(p.getProperty("PORT", "8883"));
        client.client_id = p.getProperty("CLIENT_ID", "test");
        client.password = crypto.Decode(
                p.getProperty("PASSWORD", "GbVYVlTwYM7haWAUnVC6ZA=="));
        boolean use_proxy = Boolean.valueOf(p.getProperty("USE_PROXY", "false"));
        if (use_proxy) {
            proxy = new ProxySet();
            proxy.address = p.getProperty("PROXY_ADDRESS", "");
            proxy.port = Integer.valueOf(p.getProperty("PROXY_PORT", "3128"));
            proxy.login = p.getProperty("PROXY_LOGIN", "test");
            proxy.password = crypto.Decode(p.getProperty(
                    "PROXY_PASSWORD", "GbVYVlTwYM7haWAUnVC6ZA=="));
        }
        map_scale = Integer.valueOf(p.getProperty("MAP_SCALE", "10"));
        float lon = Float.valueOf(p.getProperty("LONGITUDE", "37.3345F"));
        float lat = Float.valueOf(p.getProperty("LATITUDE", "55.50883F"));
        map_position.setPosition(lon, lat);
        int index = Integer.valueOf(p.getProperty("TAB_PANE_INDEX", "0"));
        tabPane.setSelectedIndex(index);
        int count = Integer.valueOf(p.getProperty("SUBSCRIPTION_COUNT", "0"));
        checkBoxArray = new JCheckBox[count];
        for (int i = 0; i < count; i++) {
            String subsc = p.getProperty("SUBSC_TOPIC_" + i, "");
            checkBoxArray[i] = new JCheckBox(subsc);
            if (Boolean.valueOf(p.getProperty("SUBSC_ENABLED_" + i, "false"))) {
                checkBoxArray[i].setSelected(true);
            }
        }
        subscList.setListData(checkBoxArray);
    }

    private void SaveConfig() {
        String fn = new File("").getAbsolutePath() + File.separator + INI_FILE_NAME;
        Properties p = new Properties();
        try {
            p.load(new FileInputStream(new File(fn)));
        } catch (IOException ex) {
            Log(" [Main] GranitX1.ini load fail, '" + ex + "'\n");
        }
        Crypto crypto;
        try {
            crypto = new Crypto();
        } catch (NoSuchAlgorithmException | NoSuchPaddingException ex) {
            Log(" [Main] Create Crypto fail, '" + ex + "'\n");
            return;
        }

        p.setProperty("ADDRESS", client.address);
        p.setProperty("PORT", client.port.toString());
        p.setProperty("CLIENT_ID", client.client_id);
        p.setProperty("PASSWORD", crypto.Encode(client.password));

        if (proxy != null) {
            p.setProperty("USE_PROXY", "true");
            p.setProperty("PROXY_ADDRESS", proxy.address);
            p.setProperty("PROXY_PORT", proxy.port.toString());
            p.setProperty("PROXY_LOGIN", proxy.login);
            p.setProperty("PROXY_PASSWORD", crypto.Encode(proxy.password));
        }
        p.setProperty("MAP_SCALE", Integer.toString(map.getScale()));
        map.getPosition(map_position);
        p.setProperty("LONGITUDE", Double.toString(map_position.lon));
        p.setProperty("LATITUDE", Double.toString(map_position.lat));
        p.setProperty("TAB_PANE_INDEX", Integer.toString(tabPane.getSelectedIndex()));
        p.setProperty("SUBSCRIPTION_COUNT", Integer.toString(checkBoxArray.length));
        for (int i = 0; i < checkBoxArray.length; i++) {
            p.setProperty("SUBSC_TOPIC_" + i, checkBoxArray[i].getText());
            p.setProperty("SUBSC_ENABLED_" + i, 
                    Boolean.toString(checkBoxArray[i].isSelected()));
        }             
        try {
            p.store(new FileOutputStream(new File(fn)), "Properties");
        } catch (IOException ex) {
            Log(" [Main] GranitX1.ini  fail, '" + ex + "'\n");
        }

    }

    private void OnClientData(Object object) {
        if (object != null) {
            Task task = (Task) object;
            Log(" [Client] Task '" + task.name + "' " + task.getStatus() + "\n");
        }
        Refresh();
    }

    private void OnClientConnect(Object object) {
        int counter = 0;
        for (JCheckBox array : checkBoxArray) {
            if (array.isSelected()) {
                counter++;
            }
        }
        if (counter != 0) {
            String names[] = new String[counter];
            int qos[] = new int[counter];
            counter = 0;
            for (JCheckBox array : checkBoxArray) {
                if (array.isSelected()) {
                    names[counter] = array.getText();
                    qos[counter++] = 0;
                }
            }
            Task task;
            try {
                task = Task.createSubscribe(names, qos);
            } catch (MqttException ex) {
                Log(ex.toString());
                return;
            }
            client.AddTask(task);
        }
    }

    private void Refresh() {
        switch (tabPane.getSelectedIndex()) {
            case 0:
                RefreshMap();
                break;
            case 1:
                RefreshTable();
                break;
        }
    }

    private void RefreshMap() {

    }

    private void RefreshTable() {
        switch (entityTypes.getSelectedIndex()) {
            case 0:
                entities = client.devices;
                break;
            case 1:
                entities = client.users;
                break;
            default:
                return;
        }
        if (selectedEntities.isEmpty() && !entities.isEmpty()) {
            selectedEntities.add(entities.firstKey());
        }
        RefreshEntities();
        RefreshAttributes();
    }

    private void RefreshEntities() {
        LinkedList<Integer> tempList = new LinkedList();
        listEntities.clear();
        listEntities.ensureCapacity(entities.size());
        DefaultListModel listModel = new DefaultListModel();
        EAV.DualKey dualKey = new DualKey(0, 1000);
        //for (Entry<DualKey, AttributesMap> e : entities.entrySet()) {
        entities.entrySet().forEach((e) -> {
            attributes = e.getValue();
            AttributeValue av = attributes.get(dualKey);
            if (av != null) {
                if (selectedEntities.contains(e.getKey())) {
                    tempList.add(listModel.size());
                }
                listEntities.add(e.getKey());
                listModel.addElement(av.toString());
            }
        });
        int indices[] = new int[tempList.size()];
        for (int i = 0; i < tempList.size(); i++) {
            indices[i] = tempList.get(i);
        }
        entitiesList.setModel(listModel);
        entitiesList.setSelectedIndices(indices);
    }

    private String AttributeName(int type) {
        AttributeDescriptor ad = client.AttributeDescriptors.get(type);
        if (ad != null) {
            return ad.name;
        }
        return "not found";
    }

    private void RefreshAttributes() {
        DefaultTableModel tableModel = (DefaultTableModel) attributesTable.getModel();
        attributes = null;
        for (DualKey key : selectedEntities) {
            attributes = entities.get(key);
            if (attributes != null) {
                break;
            }
        }
        if (attributes == null) {
            tableModel.setRowCount(0);
            return;
        }
        tableModel.setRowCount(attributes.size());
        int row = 0;
        for (Entry<DualKey, AttributeValue> e : attributes.entrySet()) {
            DualKey key = e.getKey();
            tableModel.setValueAt(key.num, row, 0);
            tableModel.setValueAt(key.type, row, 1);
            tableModel.setValueAt(e.getValue(), row, 2);
            tableModel.setValueAt(AttributeName(key.type), row++, 3);
        }
    }
}
